name: GraalVM Native Image builds
on: [push, pull_request, workflow_dispatch]
jobs:
  build:
    name: VTT WoD Book Parser on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 90
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
        include:
          - os: ubuntu-latest
            executable-suffix: ''
            native-build-args: -Xmx10g
          - os: macos-latest
            executable-suffix: ''
            native-build-args: -Xmx13g
          - os: windows-latest
            executable-suffix: '.exe'
            native-build-args: -Xmx10g
    steps:
      - uses: actions/checkout@v2

      - uses: graalvm/setup-graalvm@v1
        with:
          version: '22.2.0'
          java-version: '17'
          components: 'native-image'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven

      - name: Maven - Package
        run: mvn -P native package
        env:
          DTRPG_TOKEN: "${{ secrets.DTRPG_TOKEN }}"
          MAVEN_OPTS: "${{ matrix.native-build-args }}"
          LOG_LEVEL: "trace"

      - name: Upload binary
        uses: actions/upload-artifact@v2
        with:
          name: vtt-wod-book-parser-${{ matrix.os }}
          path: target/vtt-wod-book-parser*
  publish-to-github:
    name: Publish to Github
    needs: [build]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
          - os: macos-latest
          - os: windows-latest
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: vtt-wod-book-parser-${{ matrix.os }}
          path: target
      - name: Package Artifacts - Full
        run: |
          src=$(pwd)
          stage=$(mktemp -d)
          suffix=""
          osName=""
          case "${{ matrix.os }}" in
              ubuntu-latest)
                osName="linux"
                ;;
              macos-latest)
                osName="macos"
                ;;
              windows-latest)
                osName="windows"
                suffix=".exe"
                ;;
              *)
                osName="unknown"
                suffix=".unknown"
                ;;
          esac
          RELEASE_VERSION=${GITHUB_REF#refs/tags/v}
          ls -la
          ls -la target/
          cp target/vtt-wod-book-parser$suffix $stage/vtt-wod-book-parser-$osName-$RELEASE_VERSION-x64$suffix
          cd $stage
          ARCHIVE_SUFFIX=""
          COMPRESSION_COMMAND=""
          if [[ "$osName" == "windows" ]]; then
            ARCHIVE_SUFFIX="zip"
            COMPRESSION_COMMAND="zip -r"
          else
            chmod +x vtt-wod-book-parser-$osName-$RELEASE_VERSION-x64$suffix
            ARCHIVE_SUFFIX="tgz"
            COMPRESSION_COMMAND="tar czf"
          fi
          
          ASSET_NAME="vtt-wod-book-parser-$osName-$RELEASE_VERSION-x64.$ARCHIVE_SUFFIX"
          ASSET_PATH="$src/$ASSET_NAME"
          CHECKSUM_PATH="$ASSET_PATH.sha256"
          echo "ASSET_PATH=$ASSET_PATH" >> $GITHUB_ENV
          echo "CHECKSUM_PATH=$CHECKSUM_PATH" >> $GITHUB_ENV
          $COMPRESSION_COMMAND $ASSET_PATH *
          
          cd $src
          sha256sum $ASSET_NAME > $CHECKSUM_PATH

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          prerelease: true
          files: |
            ${{ env.ASSET_PATH }}
            ${{ env.CHECKSUM_PATH }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}